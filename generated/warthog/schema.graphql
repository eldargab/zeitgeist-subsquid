interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

type Block {
  value: String!
}

""" Tracks block timestamps """
type BlockTimestamp implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  blockNumber: Int!
  timestamp: BigInt!
}

type BlockTimestampConnection {
  totalCount: Int!
  edges: [BlockTimestampEdge!]!
  pageInfo: PageInfo!
}

input BlockTimestampCreateInput {
  blockNumber: Float!
  timestamp: String!
}

type BlockTimestampEdge {
  node: BlockTimestamp!
  cursor: String!
}

enum BlockTimestampOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  timestamp_ASC
  timestamp_DESC
}

input BlockTimestampUpdateInput {
  blockNumber: Float
  timestamp: String
}

input BlockTimestampWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blockNumber_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  AND: [BlockTimestampWhereInput!]
  OR: [BlockTimestampWhereInput!]
}

input BlockTimestampWhereUniqueInput {
  id: ID!
}

"""GraphQL representation of Bytes"""
scalar Bytes

type Categorical {
  categories: Int!
}

type CategoricalMarket implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  oracle: String!
  creation: String!
  categories: BigInt!
  block: Int!
}

type CategoricalMarketConnection {
  totalCount: Int!
  edges: [CategoricalMarketEdge!]!
  pageInfo: PageInfo!
}

input CategoricalMarketCreateInput {
  oracle: String!
  creation: String!
  categories: String!
  block: Float!
}

type CategoricalMarketEdge {
  node: CategoricalMarket!
  cursor: String!
}

enum CategoricalMarketOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  oracle_ASC
  oracle_DESC
  creation_ASC
  creation_DESC
  categories_ASC
  categories_DESC
  block_ASC
  block_DESC
}

input CategoricalMarketUpdateInput {
  oracle: String
  creation: String
  categories: String
  block: Float
}

input CategoricalMarketWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  oracle_eq: String
  oracle_contains: String
  oracle_startsWith: String
  oracle_endsWith: String
  oracle_in: [String!]
  creation_eq: String
  creation_contains: String
  creation_startsWith: String
  creation_endsWith: String
  creation_in: [String!]
  categories_eq: BigInt
  categories_gt: BigInt
  categories_gte: BigInt
  categories_lt: BigInt
  categories_lte: BigInt
  categories_in: [BigInt!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  AND: [CategoricalMarketWhereInput!]
  OR: [CategoricalMarketWhereInput!]
}

input CategoricalMarketWhereUniqueInput {
  id: ID!
}

type CommentSearchFTSOutput {
  item: CommentSearchSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union CommentSearchSearchResult = Transfer

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Hello {
  greeting: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Market implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  marketId: Int!
  creator: String!
  creation: String!
  oracle: String!
  end: MarketEnd!
  metadata: String!
  marketType: MarketType!
  block: Int!
}

type MarketConnection {
  totalCount: Int!
  edges: [MarketEdge!]!
  pageInfo: PageInfo!
}

type MarketCreated {
  lowerBound: Float!
  upperBound: Float!
}

input MarketCreateInput {
  marketId: Float!
  creator: String!
  creation: String!
  oracle: String!
  end: JSONObject!
  metadata: String!
  marketType: JSONObject!
  block: Float!
}

type MarketEdge {
  node: Market!
  cursor: String!
}

union MarketEnd = Block | Timestamp

enum MarketOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  marketId_ASC
  marketId_DESC
  creator_ASC
  creator_DESC
  creation_ASC
  creation_DESC
  oracle_ASC
  oracle_DESC
  metadata_ASC
  metadata_DESC
  block_ASC
  block_DESC
}

union MarketType = Categorical | Scalar

input MarketUpdateInput {
  marketId: Float
  creator: String
  creation: String
  oracle: String
  end: JSONObject
  metadata: String
  marketType: JSONObject
  block: Float
}

input MarketWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  marketId_eq: Int
  marketId_gt: Int
  marketId_gte: Int
  marketId_lt: Int
  marketId_lte: Int
  marketId_in: [Int!]
  creator_eq: String
  creator_contains: String
  creator_startsWith: String
  creator_endsWith: String
  creator_in: [String!]
  creation_eq: String
  creation_contains: String
  creation_startsWith: String
  creation_endsWith: String
  creation_in: [String!]
  oracle_eq: String
  oracle_contains: String
  oracle_startsWith: String
  oracle_endsWith: String
  oracle_in: [String!]
  end_json: JSONObject
  metadata_eq: String
  metadata_contains: String
  metadata_startsWith: String
  metadata_endsWith: String
  metadata_in: [String!]
  marketType_json: JSONObject
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  AND: [MarketWhereInput!]
  OR: [MarketWhereInput!]
}

input MarketWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Query {
  blockTimestamps(offset: Int, limit: Int = 50, where: BlockTimestampWhereInput, orderBy: [BlockTimestampOrderByInput!]): [BlockTimestamp!]!
  blockTimestampByUniqueInput(where: BlockTimestampWhereUniqueInput!): BlockTimestamp
  blockTimestampsConnection(first: Int, after: String, last: Int, before: String, where: BlockTimestampWhereInput, orderBy: [BlockTimestampOrderByInput!]): BlockTimestampConnection!
  categoricalMarkets(offset: Int, limit: Int = 50, where: CategoricalMarketWhereInput, orderBy: [CategoricalMarketOrderByInput!]): [CategoricalMarket!]!
  categoricalMarketByUniqueInput(where: CategoricalMarketWhereUniqueInput!): CategoricalMarket
  categoricalMarketsConnection(first: Int, after: String, last: Int, before: String, where: CategoricalMarketWhereInput, orderBy: [CategoricalMarketOrderByInput!]): CategoricalMarketConnection!
  markets(offset: Int, limit: Int = 50, where: MarketWhereInput, orderBy: [MarketOrderByInput!]): [Market!]!
  marketByUniqueInput(where: MarketWhereUniqueInput!): Market
  marketsConnection(first: Int, after: String, last: Int, before: String, where: MarketWhereInput, orderBy: [MarketOrderByInput!]): MarketConnection!
  commentSearch(whereTransfer: TransferWhereInput, skip: Int = 0, limit: Int = 5, text: String!): [CommentSearchFTSOutput!]!
  scalarMarkets(offset: Int, limit: Int = 50, where: ScalarMarketWhereInput, orderBy: [ScalarMarketOrderByInput!]): [ScalarMarket!]!
  scalarMarketByUniqueInput(where: ScalarMarketWhereUniqueInput!): ScalarMarket
  scalarMarketsConnection(first: Int, after: String, last: Int, before: String, where: ScalarMarketWhereInput, orderBy: [ScalarMarketOrderByInput!]): ScalarMarketConnection!
  transfers(offset: Int, limit: Int = 50, where: TransferWhereInput, orderBy: [TransferOrderByInput!]): [Transfer!]!
  transferByUniqueInput(where: TransferWhereUniqueInput!): Transfer
  transfersConnection(first: Int, after: String, last: Int, before: String, where: TransferWhereInput, orderBy: [TransferOrderByInput!]): TransferConnection!
  hello: Hello!
}

type Scalar {
  lowerBound: Float!
  upperBound: Float!
}

type ScalarMarket implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  oracle: String!
  end: BigInt!
  creation: String!
  outcomeRange: [BigInt!]!
  block: Int!
}

type ScalarMarketConnection {
  totalCount: Int!
  edges: [ScalarMarketEdge!]!
  pageInfo: PageInfo!
}

input ScalarMarketCreateInput {
  oracle: String!
  end: String!
  creation: String!
  outcomeRange: [BigInt!]!
  block: Float!
}

type ScalarMarketEdge {
  node: ScalarMarket!
  cursor: String!
}

enum ScalarMarketOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  oracle_ASC
  oracle_DESC
  end_ASC
  end_DESC
  creation_ASC
  creation_DESC
  block_ASC
  block_DESC
}

input ScalarMarketUpdateInput {
  oracle: String
  end: String
  creation: String
  outcomeRange: [BigInt!]
  block: Float
}

input ScalarMarketWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  oracle_eq: String
  oracle_contains: String
  oracle_startsWith: String
  oracle_endsWith: String
  oracle_in: [String!]
  end_eq: BigInt
  end_gt: BigInt
  end_gte: BigInt
  end_lt: BigInt
  end_lte: BigInt
  end_in: [BigInt!]
  creation_eq: String
  creation_contains: String
  creation_startsWith: String
  creation_endsWith: String
  creation_in: [String!]
  outcomeRange_containsAll: [BigInt!]
  outcomeRange_containsNone: [BigInt!]
  outcomeRange_containsAny: [BigInt!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  AND: [ScalarMarketWhereInput!]
  OR: [ScalarMarketWhereInput!]
}

input ScalarMarketWhereUniqueInput {
  id: ID!
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}

type Timestamp {
  value: String!
}

""" All transfers """
type Transfer implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  comment: String
  block: Int!
  tip: BigInt!
  timestamp: BigInt!
  insertedAt: DateTime!
}

type TransferConnection {
  totalCount: Int!
  edges: [TransferEdge!]!
  pageInfo: PageInfo!
}

input TransferCreateInput {
  from: String!
  to: String!
  value: String!
  comment: String
  block: Float!
  tip: String!
  timestamp: String!
  insertedAt: DateTime!
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  comment_ASC
  comment_DESC
  block_ASC
  block_DESC
  tip_ASC
  tip_DESC
  timestamp_ASC
  timestamp_DESC
  insertedAt_ASC
  insertedAt_DESC
}

input TransferUpdateInput {
  from: String
  to: String
  value: String
  comment: String
  block: Float
  tip: String
  timestamp: String
  insertedAt: DateTime
}

input TransferWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: Bytes
  from_in: [Bytes!]
  to_eq: Bytes
  to_in: [Bytes!]
  value_eq: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_lt: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  comment_eq: String
  comment_contains: String
  comment_startsWith: String
  comment_endsWith: String
  comment_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  tip_eq: BigInt
  tip_gt: BigInt
  tip_gte: BigInt
  tip_lt: BigInt
  tip_lte: BigInt
  tip_in: [BigInt!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  insertedAt_eq: DateTime
  insertedAt_lt: DateTime
  insertedAt_lte: DateTime
  insertedAt_gt: DateTime
  insertedAt_gte: DateTime
  AND: [TransferWhereInput!]
  OR: [TransferWhereInput!]
}

input TransferWhereUniqueInput {
  id: ID!
}
